Index: application/src/main/java/com/progressoft/application/repository/AccountRepositoryMySQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.progressoft.application.repository;\n\nimport com.progressoft.application.entity.AccountEntity;\nimport com.progressoft.application.entity.AccountMapper;\nimport event.eventusecases.ChangeStatusEventUseCase;\nimport event.eventusecases.CreateAccountEventUseCase;\nimport model.Account;\nimport org.springframework.stereotype.Repository;\nimport repository.AccountRepository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Repository\npublic class AccountRepositoryMySQL implements AccountRepository {\n    private final JpaAccountRepository jpaAccountRepository;\n\n    private final AccountMapper mapper;\n\n\n\n    public AccountRepositoryMySQL(JpaAccountRepository jpaAccountRepository, AccountMapper mapper) {\n        this.jpaAccountRepository = jpaAccountRepository;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public void save(Account account) {\n        jpaAccountRepository.save(mapper.map(account));\n    }\n\n\n    @Override\n    public List<Account> findAll() {\n        List<AccountEntity> all = jpaAccountRepository.findAll();\n        return all.stream().map(mapper::map).collect(Collectors.toList());\n    }\n\n    @Override\n    public Account findByAccountNumber(String id) {\n        Optional<AccountEntity> accountEntity = jpaAccountRepository.findByAccountNumber(Long.parseLong(id));\n        return accountEntity.map(mapper::map).orElse(null);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/src/main/java/com/progressoft/application/repository/AccountRepositoryMySQL.java b/application/src/main/java/com/progressoft/application/repository/AccountRepositoryMySQL.java
--- a/application/src/main/java/com/progressoft/application/repository/AccountRepositoryMySQL.java	
+++ b/application/src/main/java/com/progressoft/application/repository/AccountRepositoryMySQL.java	
@@ -15,11 +15,8 @@
 @Repository
 public class AccountRepositoryMySQL implements AccountRepository {
     private final JpaAccountRepository jpaAccountRepository;
-
     private final AccountMapper mapper;
 
-
-
     public AccountRepositoryMySQL(JpaAccountRepository jpaAccountRepository, AccountMapper mapper) {
         this.jpaAccountRepository = jpaAccountRepository;
         this.mapper = mapper;
Index: application/src/test/java/com/progressoft/application/controller/AccountsControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.progressoft.application.controller;\n\nimport com.progressoft.application.entity.AccountEntity;\nimport com.progressoft.application.entity.AccountMapper;\nimport com.progressoft.application.repository.AccountRepositoryMySQL;\nimport com.progressoft.application.repository.JpaAccountRepository;\nimport event.eventusecases.ChangeStatusEventUseCase;\nimport event.eventusecases.CreateAccountEventUseCase;\nimport model.Account;\nimport model.Status;\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockHttpServletResponse;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.RequestBuilder;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport repository.AccountRepository;\nimport usecases.CreateAccountUseCase;\nimport usecases.DeactivateAccountUseCase;\nimport usecases.InactivateAccountUseCase;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.*;\n\n@WebMvcTest(value = AccountsController.class)\n@ExtendWith(SpringExtension.class)\nclass AccountsControllerTest {\n\n    @MockBean\n    private AccountRepository accountRepository;\n    @MockBean\n    private AccountRepositoryMySQL accountRepositoryMySQL;\n    @MockBean\n    private AccountMapper accountMapper;\n    @MockBean\n    private CreateAccountUseCase createAccountUseCase;\n    @MockBean\n    private DeactivateAccountUseCase deactivateAccountUseCase;\n    @MockBean\n    private InactivateAccountUseCase inactivateAccountUseCase;\n    @MockBean\n    private ChangeStatusEventUseCase changeStatusEventUseCase;\n    @MockBean\n    private CreateAccountEventUseCase createAccountEventUseCase;\n    @MockBean\n    private JpaAccountRepository jpaAccountRepository;\n    @Autowired\n    MockMvc mockMvc;\n\n    @Test\n    public void getAllAccounts() throws Exception {\n        Account account = Account.builder()\n                .creationDate(LocalDateTime.now())\n                .status(Status.Inactive)\n                .availableBalance(BigDecimal.valueOf(3025.5015))\n                .accountNumber(123456L)\n                .build();\n        when(accountRepository.findAll()).thenReturn(List.of(account));\n        RequestBuilder request = MockMvcRequestBuilders.get(\"/api/v1/accounts\").accept(MediaType.APPLICATION_JSON);\n        MvcResult mvcResult = mockMvc.perform(request).andReturn();\n        MockHttpServletResponse response = mvcResult.getResponse();\n        Assertions.assertThat(HttpStatus.OK.value()).isEqualTo(response.getStatus());\n    }\n\n    @Test\n    public void givenValidAccount_whenAddAccount_thenExpectedStatusCode() throws Exception {\n        String json = \"{\\\"customerId\\\":\\\"KHALEDKAR\\\",\\\"availableBalance\\\":\\\"3025.5015\\\"}\";\n\n        RequestBuilder request = MockMvcRequestBuilders\n                .post(\"/api/v1/accounts\")\n                .accept(MediaType.APPLICATION_JSON)\n                .content(json)\n                .contentType(MediaType.APPLICATION_JSON);\n\n        MvcResult result = mockMvc.perform(request).andReturn();\n\n        MockHttpServletResponse response = result.getResponse();\n\n        Assertions.assertThat(response.getStatus()).isEqualTo(HttpStatus.CREATED.value());\n\n    }\n    @Test\n    public void givenValidAccountID_whenDeActive_thenExpectedStatusCode() throws Exception {\n        Account account = Account.builder().accountNumber(123456789123L).status(Status.Active).build();\n        doNothing().when(deactivateAccountUseCase).execute(account);\n        when(accountRepository.findByAccountNumber(anyString())).thenReturn(account);\n        RequestBuilder request = MockMvcRequestBuilders\n                .post(\"/api/v1/accounts/123456789123/deactivate\")\n                .accept(MediaType.APPLICATION_JSON)\n                .contentType(MediaType.APPLICATION_JSON);\n\n        MvcResult result = mockMvc.perform(request).andReturn();\n        MockHttpServletResponse response = result.getResponse();\n        Assertions.assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/src/test/java/com/progressoft/application/controller/AccountsControllerTest.java b/application/src/test/java/com/progressoft/application/controller/AccountsControllerTest.java
--- a/application/src/test/java/com/progressoft/application/controller/AccountsControllerTest.java	
+++ b/application/src/test/java/com/progressoft/application/controller/AccountsControllerTest.java	
@@ -105,6 +105,5 @@
         MockHttpServletResponse response = result.getResponse();
         Assertions.assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
 
-
     }
 }
\ No newline at end of file
